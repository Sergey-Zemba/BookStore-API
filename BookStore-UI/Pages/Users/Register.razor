@page "/register"

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navManager

<h3 class="card-title">Register Now</h3>
@if (!isSuccess)
{
    <ErrorMessage Message="Something went wrong with the registration attempt." />
}
<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText id="email" class="form-control" @bind-Value="Model.EmailAddress"></InputText>
            <ValidationMessage For="@(() => Model.EmailAddress)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="Model.Password"></InputText>
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div class="form-group">
            <label for="confirmpassword">Confirm Password</label>
            <InputText id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword"></InputText>
            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    private RegistrationModel Model = new RegistrationModel();
    private bool isSuccess = true;

    private async Task HandleRegistration()
    {
        isSuccess = await _authRepo.Register(Model);

        if (isSuccess)
        {
            _navManager.NavigateTo("/login");
        }
    }
}
