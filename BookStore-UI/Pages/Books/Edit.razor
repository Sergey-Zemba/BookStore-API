@page "/books/edit/{Id}"
@using BookStore_UI.Static
@using System.IO

@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _repo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager

<h3>Edit Book</h3>
<hr />
<br />

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please try again." />
}
else if (Model == null)
{
    <LoadingMessage Message="Loading Book Details..." />
}
else
{
    <EditForm Model="Model" OnValidSubmit="EditBook">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Book Title</label>
            <InputText @bind-Value="Model.Title" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="isbn">ISBN</label>
            <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="Model.Price" class="form-control" id="price" />
        </div>
        <div class="form-group">
            <label for="author">Authors</label>
            <select @bind="Model.AuthorId" class="form-control" id="author">
                <option value="">-- Select Author --</option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.Firstname @author.Lastname</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="bookcover">Book Cover Photo</label>
            <BlazorInputFile.InputFile OnChange="HandleFileSelection" />
            @if (isInvalidFileType)
            {
                <ErrorMessage Message="Please remove the invalid file type and select a new image or leave this field blank" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataUrl))
            {
                <img src="@imageDataUrl" style="height: 100px; width: 100px" />
            }
            else if (!string.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="uploads/@Model.Image" style="height: 100px; width: 100px" />
            }
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Book Model = new Book();
    private IList<Author> Authors;
    private IFileListEntry file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private bool isFileChanged;
    private string imageDataUrl;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.BooksEndpoint, id);
        Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
    }

    private async Task EditBook()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                _fileUpload.RemoveFile(Model.Image);
                await _fileUpload.UploadFile(file, picName);

                Model.Image = picName;
            }
            else if(isFileChanged && file == null)
            {
                _fileUpload.RemoveFile(Model.Image);
                Model.Image = string.Empty;
            }

            isSuccess = await _repo.Update(Endpoints.BooksEndpoint, Model, Model.Id);
            if (isSuccess)
            {
                BackToList();
            }
        }
    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        isFileChanged = true;

        if (file != null)
        {
            var name = file.Name;
            if (name.EndsWith(".jpg") || name.EndsWith(".png") || name.EndsWith(".jpeg"))
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(ms.ToArray());
                imageDataUrl = $"data:image/png,base64, {imageBase64Data}";
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataUrl = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/books");
    }
}
