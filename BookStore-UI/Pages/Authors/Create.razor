@page "/authors/create"
@attribute [Authorize(Roles = "Administrator")]
@using BookStore_UI.Static

@inject IAuthorRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService

<h3 class="card-title">Create New Author</h3>
<br />
<hr />
<br />

@if (!isSuccess)
{
    <ErrorMessage Message="Something went wrong with the create attempt." />
}

<EditForm Model="Model" OnValidSubmit="CreateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText @bind-value="Model.Firstname" class="form-control" id="firstname" />
        <ValidationMessage For="@(() => Model.Firstname)" />
    </div>
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText @bind-value="Model.Lastname" class="form-control" id="lastname" />
        <ValidationMessage For="@(() => Model.Lastname)" />
    </div>
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputTextArea @bind-value="Model.Bio" class="form-control" id="bio" />
        <ValidationMessage For="@(() => Model.Bio)" />
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-plus"></span>
        Create Author
    </button>

    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back to List
    </button>
</EditForm>

@code {
    private Author Model = new Author();
    private bool isSuccess = true;

    private async Task CreateAuthor()
    {
        isSuccess = await _repo.Create(Endpoints.AuthorsEndpoint, Model);
        if (isSuccess)
        {
            _toastService.ShowSuccess("Author created successfully.", "");
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors");
    }
}